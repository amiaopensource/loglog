#!/bin/bash

#This is a list of functions used for creating and updating logs for bash scripts.

#This function creates a log at a specific directory
function logCreate {
   configLogPath="${1}"
   timestamp=$(date "+%Y-%m-%d - %H.%M.%S")
   touch "${configLogPath}"
   echo "====== Script started at $timestamp ======" >> "${configLogPath}"
}

#This function opens the log
function logOpen {
   open "${configLogPath}"
}

function logNewLine {
   timestamp=$(date "+%Y-%m-%d - %H.%M.%S")
   echo "$timestamp - ${1}" >> "${configLogPath}"
}

function logAddLine {
   sed -i '' -e '$s/$/'"$1"'/' "${configLogPath}"     #this was a doozy to write. the -i '' -e is required for MacOS for some reason
}

##This function logs the beginning and end of a command, and calculates the total time
#got the prtinf statement from here: https://stackoverflow.com/questions/46471979/logging-inside-a-bash-script-file
#got the seconds thing from https://unix.stackexchange.com/questions/271406/how-to-log-command-start-time-and-command-end-time-in-txt-file-using-cygwin
function logLog {
	SECONDS=0 &&
	echo -e "********Input at $(date "+%Y-%m-%d - %H.%M.%S") :\n $(printf ' %q' "$@")" >> "${configLogPath}" &&
	#print timestamp and command to log
	"$@" &&
	#runs the command
	echo "********Completed at $(date "+%Y-%m-%d - %H.%M.%S")" >> "${configLogPath}" &&
	#prints timestamp once the command has exited
	duration=$SECONDS 
	echo "Total Execution Time: $(($duration / 60)) m $(($duration % 60)) s" >> "${configLogPath}" 
}
